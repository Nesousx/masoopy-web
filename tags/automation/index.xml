<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>automation - Tag - Masoopy</title><link>https://www.masoopy.com/tags/automation/</link><description>automation - Tag - Masoopy</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 11 Dec 2018 08:48:46 +0100</lastBuildDate><atom:link href="https://www.masoopy.com/tags/automation/" rel="self" type="application/rss+xml"/><item><title>Manage VMware snapshots with PowerCLI</title><link>https://www.masoopy.com/manage-vmware-snapshots-with-powercli/</link><pubDate>Tue, 11 Dec 2018 08:48:46 +0100</pubDate><author>Denis G.</author><guid>https://www.masoopy.com/manage-vmware-snapshots-with-powercli/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/2018/12/Manage-VMware-snapshots-with-PowerCLI.png" referrerpolicy="no-referrer">
            </div><p>Manually taking a snapshot under VMware is easy : connect to the HTML5 Web UI, find the server from the list, right click, select Snapshot, Name it&hellip; However, when you have to do it several times in a row, it becomes really frustrating. Let&rsquo;s see how to improve that.</p>
<h2 id="here-comes-powercli">Here comes PowerCLI</h2>
<p>VMware released an awesome (and I am Linux guy) tool to manage your virtual machines from the command line. It is called <a href="https://communities.vmware.com/community/vmtn/automationtools/powercli" target="_blank" rel="noopener noreffer ">PowerCLI</a>, is based on PowerShell and honestly it really works like a charm.</p>
<p>it can be installed on <a href="https://www.virtuallyghetto.com/2016/09/vmware-powercli-for-mac-os-x-linux-more-yes-please.html" target="_blank" rel="noopener noreffer ">Windows, Linux, Macos</a> and of course <a href="https://hub.docker.com/r/vmware/powerclicore/" target="_blank" rel="noopener noreffer ">inside a Docker container</a>. I&rsquo;ll let the installation part up to you, there is plenty of guides available on internet, but I&rsquo;ll share my scripts.</p>
<h2 id="my-current-workflow">My current workflow</h2>
<p>I often change / refine / try to improve my workflow. However, for current workflow for managing updates on our Linux servers is like below :</p>
<ul>
<li>Make a snapshot of every server with PowerCLI, and give them a relevant name ;</li>
<li>Apply update with Ansible (and reboot them if required) ;</li>
<li>Delete snapshots after 2 days if everything is OK.</li>
</ul>
<p>With no further ado, here are my scripts :</p>
<p>Create snapshots :</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-text" data-lang="text">Connect-VIServer -server vcenter.domain.com $vmlist = &#34;srv-1&#34;, &#34;srv-2&#34;, &#34;srv-3&#34; foreach($VM in $VMlist) { New-Snapshot -VM $vm -Name Before_Update -confirm:$false -runasync:$true } Disconnect-VIServer -Confirm:$false
</code></pre></td></tr></table>
</div>
</div><p>Delete snapshots :</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-text" data-lang="text">Connect-VIServer -server vcenter.domain.com $vmlist = &#34;srv-1&#34;, &#34;srv-2&#34;, &#34;srv-3&#34; foreach($VM in $VMlist) { Get-Snapshot -VM $vm | where {$_.Name -match &#34;Before_Update&#34;} | Remove-Snapshot -RunAsync -Confirm:$False } Disconnect-VIServer -Confirm:$false
</code></pre></td></tr></table>
</div>
</div><p>Let me walk you through what it does.</p>
<ul>
<li>First line, connects to the VMware server and will pompt for credentials.</li>
<li>Then I declare an array or server, simply replace and add as many servers as you like.</li>
<li>Simple foreach loop, goes through every server of the above defined array and does its job. Make sure to check official docs for more info about extra flags.</li>
<li>NB : I use a relevant name, here &ldquo;Before_Update&rdquo; for my snapshots. It makes it easier to manage them since I know their name.</li>
<li>Finally, we disconnect from the server.</li>
</ul>
<p>I hope those little scripts will make you life a little easier, and hopefully your job a little less boring. Automating is the way to go!</p>
<p>Â </p>
]]></description></item><item><title>Automagically deploy apps with GPO and Boxstarter</title><link>https://www.masoopy.com/automagically-deploy-apps-with-gpo-and-boxstarter/</link><pubDate>Sun, 25 Nov 2018 14:03:32 +0100</pubDate><author>Denis G.</author><guid>https://www.masoopy.com/automagically-deploy-apps-with-gpo-and-boxstarter/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/2021/02/boxstarter.png" referrerpolicy="no-referrer">
            </div><p>A few days ago, I talked about <a href="https://www.masoopy.com/install-windows-programs-like-a-boss-with-ninite/" target="_blank" rel="noopener noreffer ">Ninite, which is an awesome tool to deploy several Windows apps easily</a>. However, if you want to use it on a Windows domain (likely in your company), you&rsquo;ll have to get the Pro (and paid version). Hopefully, with BoxStarter, you can do it for free. Let me show you how I do it.</p>
<h2 id="lets-do-some-scripting">Let&rsquo;s do some scripting!</h2>
<p>In my case, I want all my users to have the same &ldquo;base apps&rdquo; installed on their systems. It allows my team and I to make sure every user has access to some &ldquo;must-have&rdquo; apps like :</p>
<ul>
<li>remote access client for support ;</li>
<li>a good text editor ;</li>
<li>some video player ;</li>
<li>etc.</li>
</ul>
<p>Of course, I want to automate this. No worry, I&rsquo;ll share a little PowerShell script, but thanks to BoxStarter, it will be VERY easy.</p>
<p>We no further ado, here is the script :</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-text" data-lang="text">### Determine which version of PowerShell is running if ($PSVersionTable.PSversion.Major -eq &#34;2&#34;) ## PowerShell V2 { iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://boxstarter.org/bootstrapper.ps1&#39;)); get-boxstarter -Force } else ## PowerShell V3 { . { iwr -useb http://boxstarter.org/bootstrapper.ps1 } | iex; get-boxstarter -Force } ## List of apps to be installed $apps = &#34;Firefox&#34;, &#34;teamviewer.portable&#34;, &#34;glaryutilities-free&#34;, &#34;vlc&#34;, &#34;windirstat&#34;, &#34;pidgin&#34;, &#34;7zip&#34;, &#34;notepadplusplus&#34; foreach($app in $apps) { cinst -y $app }
</code></pre></td></tr></table>
</div>
</div><p>Let me explain a little bit what it does.</p>
<p>Since BoxStarter needs a different command line to be installed depending of the version of PowerShell, we must first determine if we are running PowerShell V3 (Windows 8 to Windows 10), or PowerShell V2 (Windows 7).</p>
<p>Once we found out which version is running, we install the base &ldquo;framework' for BoxStarter, called BoxStarter Shell.</p>
<p>Finally, we simply declare a list of apps, in which we write the name of all the apps we want to install.</p>
<p>NB: BoxStarter is based on Chocolatey and <a href="https://chocolatey.org/packages" target="_blank" rel="noopener noreffer ">all the available packages (= apps) can be found here</a>, or via the command &ldquo;choco search package&rdquo; (once the BoxStarter shell is installed).</p>
<p>Please also note that BoxStarter also allow you to modify Windows settings, such as &ldquo;Show hidden files&rdquo;, &ldquo;Acitvate remote desktop&rdquo;, etc.</p>
<h2 id="how-to-make-sure-every-user-get-the-script">How to make sure every user get the script?</h2>
<p>The way I distribute those apps is via a GPO defined on the AD server. This is a user based GPO, and it executes itself at session&rsquo;s start.</p>
<p>Which means, you have to create it into : User configuration &gt; Windows settings &gt; Scripts (session start).</p>
<p>From here, make sure to use the 2nd tab on the top in order to use a PowerShell script.</p>
<p></p>
<p>Then click &ldquo;Add&rdquo;, and &ldquo;Open directory' and you&rsquo;ll be brought up to the folder dedicated to this particular GPO :</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-text" data-lang="text">%SystemRoot%SYSVOLsysvol&lt;domain DNS name&gt;Policies{GUID}ComputerScriptsStartup
</code></pre></td></tr></table>
</div>
</div><p>Just paste your script inside this directory, and select it.</p>
<p>Now, in the &ldquo;Parameters&rdquo; field, make sure to add the following line :</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-text" data-lang="text">-ExecutionPolicy Bypass
</code></pre></td></tr></table>
</div>
</div><p>This line ensures, the script will be run whatever <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-6" target="_blank" rel="noopener noreffer ">execution policy</a> is in place.</p>
<p>From now on, any user that this GPO applies to will get the apps installed (if not already) and frequently updated.</p>
<p>NB: The very first run can take a little time and resources (in the background), but it should be barely noticeable.</p>
<h2 id="a-note-of-caution">A note of caution</h2>
<p>With any GPO work, care is the word ! This is why I advise you to test, test, test&hellip; before putting it into production.</p>
<p>In order to do so, you can create &ldquo;fake&rdquo; users and apply that GPO only to those users. You can also create a Testing OU in which you&rsquo;ll put, for example, the IT team, etc.</p>
]]></description></item><item><title>Install Windows programs like a boss with Ninite</title><link>https://www.masoopy.com/install-windows-programs-like-a-boss-with-ninite/</link><pubDate>Sat, 17 Nov 2018 23:36:57 +0100</pubDate><author>Denis G.</author><guid>https://www.masoopy.com/install-windows-programs-like-a-boss-with-ninite/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/2021/02/ninite.png" referrerpolicy="no-referrer">
            </div><p>Do you remember how you used to install programs under Windows several years ago? Next, next, next&hellip; Are you still doing it the exact same way today? If that&rsquo;s so, I may have something of interest for you, keep reading !</p>
<h2 id="windows-programs-installation-is-so-painful">Windows' programs' installation is so painful</h2>
<p>I don&rsquo;t know about you, but I am quite pissed off with the way &ldquo;software&rdquo; works on Windows. Let&rsquo;s say you want to install <a href="https://www.videolan.org/vlc/" target="_blank" rel="noopener noreffer ">VLC</a> to watch movies, then you have to fire up your web browser, go to VLC website (probably via a search engine), find the correct version (32 or 64 bits), download the product, and install it. Rinse and repeat in order to keep your software updated&hellip;</p>
<h2 id="the-linux-way">The Linux way</h2>
<p>In order to give an element of comparison, installing a program under Linux is totally different, and more user friendly. You have to fire up your &ldquo;<a href="https://help.ubuntu.com/community/UbuntuSoftwareCenter?action=show&amp;redirect=SoftwareCenterFAQ" target="_blank" rel="noopener noreffer ">software manager program</a>&rdquo;, search for VLC, and click install! That&rsquo;s it, VLC will be automatically installed with the most appropriate version (32 or 64 bits), concerning the updates, no need to think about them : your operating system will update it automagically on a regular basis (think of a working Windows update tool that also includes updates for any program that is installed on your system, like VLC or Steam). This is very similar to the way your phone works !</p>
<p>The way Linux manages installation of software is done via &ldquo;repositories&rdquo;. It is some kind of huge catalog that holds several software in the same &ldquo;place&rdquo; and keep them updated. From the user perspective, everything is &ldquo;centralized&rdquo; : it means the user can manage all its software needs in one place. However, have in mind, that on the &ldquo;developer&rdquo; or &ldquo;system&rdquo; side, this is not centralized at all. There are several copies of every software all around the world! Just in case a location &ldquo;fails&rdquo;, there will be another one available&hellip; or just a closer location to the final user in order to reduce download times.</p>
<h2 id="please-welcome-ninite">Please welcome Ninite</h2>
<p>Some smart people (a lot smarter than me!) have decided to create similar systems for Windows. Such systems are called <a href="https://chocolatey.org/" target="_blank" rel="noopener noreffer ">Chocolatey</a>, or Ninite. While Chocolatey can be more intimidating, Ninite is very easy to use.</p>
<p><a href="https://ninite.com/" target="_blank" rel="noopener noreffer ">Just browse to their official website</a>, and simply check the boxes corresponding to the programs you want to install on your system. Once you are done &ldquo;free shopping&rdquo;, just hit the &ldquo;Get your Ninite&rdquo; button at the bottom of the page. This should automatically download a very small file.</p>
<p></p>
<p>Now, you just have to run the aforementioned file from your computer, and it&rsquo;ll try to install every software you &ldquo;included&rdquo; in it:</p>
<ul>
<li>If the program is already installed, and up to date, it will try to install the next one ;</li>
<li>if the program is already installed but not up to date, it&rsquo;ll download the latest version and update it ;</li>
<li>If the program is not installed, it will download and install it.</li>
</ul>
<p>Finally, if you need to update your programs, let&rsquo;s say a few weeks after the initial install, just run the Ninite installer once again. You could also set up a scheduled task to automatically run the Ninite updater once in a while. This is however, not perfect since, the Ninite installer will &ldquo;pop up&rdquo; on your screen&hellip; only the Pro version as a &ldquo;silent&rdquo; mode that runs in the background without bugging you.</p>
<h2 id="last-but-not-least">Last but not least&hellip;</h2>
<p>Ninite &ldquo;classic&rdquo; (as compared to Pro version, with silent installer for example) is totally free.</p>
<p>It only contains &ldquo;approved&rdquo; apps : which means those apps come without any spyware / adware or any additional unwanted software. Remember when you installed Avast and it automatically checks a box to install Google Chrome as well? It won&rsquo;t happen here!</p>
<p>Finally, Ninite is compatible with every version of Windows (from XP to 10), and the corresponding &ldquo;server&rdquo; version.</p>
<p>If you are still reading this article, I believe you are not using Windows&hellip; or you are already using Ninite. <a href="https://ninite.com/" target="_blank" rel="noopener noreffer ">Come on, go manage your preferred app in a clever way, now</a>!</p>
]]></description></item></channel></rss>